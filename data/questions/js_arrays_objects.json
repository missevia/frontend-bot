{
    "category": "JavaScript Arrays & Objects",
    "questions": [
        {
            "question": "What is the difference between Array.from() and Array.of()?",
            "options": [
                "Array.from() creates an array from array-like objects, while Array.of() creates an array from its arguments",
                "Array.from() creates an array from arguments, while Array.of() creates an array from array-like objects",
                "Array.from() creates a shallow copy, while Array.of() creates a deep copy",
                "There is no difference, they are aliases of each other"
            ],
            "correct_answer_index": 0,
            "explanation": "Array.from() creates a new array from array-like or iterable objects (like strings, Sets, or Maps). Array.of() creates a new array with the elements passed as arguments. Example:\n\n```javascript\nArray.from('hello'); // ['h', 'e', 'l', 'l', 'o']\nArray.of(1, 2, 3); // [1, 2, 3]\n```\n\nðŸ“š Learn more:\n- Array.from(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n- Array.of(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of"
        },
        {
            "question": "What is the difference between Object.assign() and the spread operator (...) for objects?",
            "options": [
                "Object.assign() modifies the target object, while spread creates a new object",
                "Spread operator modifies the target object, while Object.assign() creates a new object",
                "Object.assign() is faster but spread is more readable",
                "There is no difference, they do exactly the same thing"
            ],
            "correct_answer_index": 0,
            "explanation": "Object.assign() modifies the target object in place, while the spread operator creates a new object. Example:\n\n```javascript\nconst obj1 = { a: 1 };\nconst obj2 = { b: 2 };\n\n// Object.assign modifies obj1\nObject.assign(obj1, obj2); // obj1 is now { a: 1, b: 2 }\n\n// Spread creates a new object\nconst newObj = { ...obj1, ...obj2 }; // { a: 1, b: 2 }\n```\n\nðŸ“š Learn more:\n- Object.assign(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n- Spread syntax: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"
        },
        {
            "question": "What is the difference between Array.prototype.map() and Array.prototype.forEach()?",
            "options": [
                "map() returns a new array, while forEach() returns undefined",
                "forEach() returns a new array, while map() returns undefined",
                "map() is faster but forEach() is more readable",
                "There is no difference, they do exactly the same thing"
            ],
            "correct_answer_index": 0,
            "explanation": "map() creates a new array with the results of calling a function for every array element, while forEach() executes a function for each element but returns undefined. Example:\n\n```javascript\nconst numbers = [1, 2, 3];\n\nconst doubled = numbers.map(x => x * 2); // [2, 4, 6]\nconst result = numbers.forEach(x => x * 2); // undefined\n```\n\nðŸ“š Learn more:\n- Array.prototype.map(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n- Array.prototype.forEach(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"
        },
        {
            "question": "What is the difference between Object.keys() and Object.entries()?",
            "options": [
                "Object.keys() returns an array of keys, while Object.entries() returns an array of [key, value] pairs",
                "Object.entries() returns an array of keys, while Object.keys() returns an array of [key, value] pairs",
                "Object.keys() is faster but Object.entries() is more readable",
                "There is no difference, they do exactly the same thing"
            ],
            "correct_answer_index": 0,
            "explanation": "Object.keys() returns an array of a given object's own enumerable property names, while Object.entries() returns an array of a given object's own enumerable string-keyed property [key, value] pairs. Example:\n\n```javascript\nconst obj = { a: 1, b: 2 };\n\nObject.keys(obj); // ['a', 'b']\nObject.entries(obj); // [['a', 1], ['b', 2]]\n```\n\nðŸ“š Learn more:\n- Object.keys(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n- Object.entries(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"
        },
        {
            "question": "What is the difference between Array.prototype.filter() and Array.prototype.find()?",
            "options": [
                "filter() returns all matching elements, while find() returns the first matching element",
                "find() returns all matching elements, while filter() returns the first matching element",
                "filter() is faster but find() is more readable",
                "There is no difference, they do exactly the same thing"
            ],
            "correct_answer_index": 0,
            "explanation": "filter() creates a new array with all elements that pass the test, while find() returns the first element that passes the test. Example:\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\n\nnumbers.filter(x => x > 2); // [3, 4, 5]\nnumbers.find(x => x > 2); // 3\n```\n\nðŸ“š Learn more:\n- Array.prototype.filter(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n- Array.prototype.find(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"
        },
        {
            "question": "What is the difference between Object.freeze() and Object.seal()?",
            "options": [
                "freeze() makes an object immutable, while seal() prevents adding/removing properties but allows modifying existing ones",
                "seal() makes an object immutable, while freeze() prevents adding/removing properties but allows modifying existing ones",
                "freeze() is faster but seal() is more readable",
                "There is no difference, they do exactly the same thing"
            ],
            "correct_answer_index": 0,
            "explanation": "Object.freeze() makes an object completely immutable (can't add, remove, or modify properties), while Object.seal() prevents adding or removing properties but allows modifying existing ones. Example:\n\n```javascript\nconst obj = { a: 1 };\n\nObject.freeze(obj);\nobj.a = 2; // fails silently\nobj.b = 2; // fails silently\n\nconst obj2 = { a: 1 };\nObject.seal(obj2);\nobj2.a = 2; // works\nobj2.b = 2; // fails silently\n```\n\nðŸ“š Learn more:\n- Object.freeze(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n- Object.seal(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal"
        },
        {
            "question": "What is the difference between Array.prototype.reduce() and Array.prototype.reduceRight()?",
            "options": [
                "reduce() processes from left to right, while reduceRight() processes from right to left",
                "reduceRight() processes from left to right, while reduce() processes from right to left",
                "reduce() is faster but reduceRight() is more readable",
                "There is no difference, they do exactly the same thing"
            ],
            "correct_answer_index": 0,
            "explanation": "reduce() applies a function against an accumulator and each element from left to right, while reduceRight() does the same but from right to left. Example:\n\n```javascript\nconst numbers = [1, 2, 3, 4];\n\nnumbers.reduce((a, b) => a + b); // 10 (1+2+3+4)\nnumbers.reduceRight((a, b) => a + b); // 10 (4+3+2+1)\n```\n\nðŸ“š Learn more:\n- Array.prototype.reduce(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\n- Array.prototype.reduceRight(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight"
        },
        {
            "question": "What is the difference between Object.create() and the new operator?",
            "options": [
                "Object.create() creates an object with a specified prototype, while new creates an instance of a constructor function",
                "new creates an object with a specified prototype, while Object.create() creates an instance of a constructor function",
                "Object.create() is faster but new is more readable",
                "There is no difference, they do exactly the same thing"
            ],
            "correct_answer_index": 0,
            "explanation": "Object.create() creates a new object with the specified prototype object and properties, while the new operator creates an instance of a user-defined object type or of one of the built-in object types. Example:\n\n```javascript\nconst proto = { greet() { return 'Hello'; } };\n\n// Using Object.create\nconst obj1 = Object.create(proto);\n\n// Using new\nfunction Person() {}\nPerson.prototype = proto;\nconst obj2 = new Person();\n```\n\nðŸ“š Learn more:\n- Object.create(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n- new operator: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new"
        }
    ]
} 