{
    "category": "JavaScript Methods",
    "questions": [
        {
            "question": "What does Array.map() do?",
            "options": [
                "Filters array elements based on a condition",
                "Creates a new array with the results of calling a function for every array element",
                "Reduces array to a single value",
                "Sorts array elements"
            ],
            "correct_answer_index": 1,
            "explanation": "map() creates a new array with the results of calling a function for every array element. It doesn't modify the original array.\n\nExample:\n`const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\n// doubled is [2, 4, 6]`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"
        },
        {
            "question": "What does Array.filter() do?",
            "options": [
                "Finds the first element that passes a test",
                "Removes elements from an array",
                "Creates a new array with all elements that pass a test",
                "Combines two arrays"
            ],
            "correct_answer_index": 2,
            "explanation": "filter() creates a new array with all elements that pass the test implemented by the provided function.\n\nExample:\n`const numbers = [1, 2, 3, 4, 5];\nconst evenNumbers = numbers.filter(num => num % 2 === 0);\n// evenNumbers is [2, 4]`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"
        },
        {
            "question": "What does Array.reduce() do?",
            "options": [
                "Removes elements from array",
                "Reverses array order",
                "Splits array into chunks",
                "Reduces array to a single value by executing a reducer function"
            ],
            "correct_answer_index": 3,
            "explanation": "reduce() executes a reducer function on each element, resulting in a single output value.\n\nExample:\n`const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, curr) => acc + curr, 0);\n// sum is 10`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"
        },
        {
            "question": "What does Array.forEach() do?",
            "options": [
                "Creates a new array with transformed elements",
                "Filters array elements",
                "Sorts array elements",
                "Executes a function for each array element without creating a new array"
            ],
            "correct_answer_index": 3,
            "explanation": "forEach() executes a provided function once for each array element.\n\nExample:\n`const fruits = ['apple', 'banana', 'orange'];\nfruits.forEach(fruit => console.log(fruit));\n// Logs: apple, banana, orange`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"
        },
        {
            "question": "What does Array.find() return?",
            "options": [
                "All elements that match a condition",
                "The index of the first matching element",
                "A boolean indicating if any element matches",
                "The first element that matches a condition"
            ],
            "correct_answer_index": 3,
            "explanation": "find() returns the value of the first element that passes a test.\n\nExample:\n`const users = [{id: 1, name: 'John'}, {id: 2, name: 'Jane'}];\nconst user = users.find(user => user.id === 2);\n// user is {id: 2, name: 'Jane'}`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"
        },
        {
            "question": "What does Array.includes() do?",
            "options": [
                "Adds a value to an array",
                "Removes a value from an array",
                "Counts occurrences of a value",
                "Checks if an array includes a specific value"
            ],
            "correct_answer_index": 3,
            "explanation": "includes() determines whether an array includes a certain value.\n\nExample:\n`const numbers = [1, 2, 3];\nconsole.log(numbers.includes(2)); // true\nconsole.log(numbers.includes(4)); // false`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"
        },
        {
            "question": "What does Array.sort() do by default with numbers?",
            "options": [
                "Sorts numerically",
                "Sorts randomly",
                "Maintains original order",
                "Sorts by string conversion"
            ],
            "correct_answer_index": 3,
            "explanation": "sort() converts elements to strings and compares their sequences of UTF-16 code units.\n\nExample:\n`const numbers = [10, 5, 8, 1, 7];\nnumbers.sort(); // [1, 10, 5, 7, 8] (string comparison)\nnumbers.sort((a, b) => a - b); // [1, 5, 7, 8, 10] (numeric comparison)`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"
        },
        {
            "question": "What does Array.concat() do?",
            "options": [
                "Splits an array into chunks",
                "Removes duplicate elements",
                "Reverses array order",
                "Merges two or more arrays"
            ],
            "correct_answer_index": 3,
            "explanation": "concat() is used to merge two or more arrays.\n\nExample:\n`const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst combined = arr1.concat(arr2);\n// combined is [1, 2, 3, 4]`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"
        },
        {
            "question": "What does String.includes() do?",
            "options": [
                "Adds a substring to a string",
                "Removes a substring from a string",
                "Counts occurrences of a substring",
                "Checks if a string contains a specific substring"
            ],
            "correct_answer_index": 3,
            "explanation": "includes() determines whether a string contains a specified substring.\n\nExample:\n`const str = 'Hello, World!';\nconsole.log(str.includes('World')); // true\nconsole.log(str.includes('world')); // false (case-sensitive)`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes"
        },
        {
            "question": "What does String.replace() do?",
            "options": [
                "Replaces all occurrences of a substring",
                "Removes a substring",
                "Adds a substring",
                "Replaces the first occurrence of a substring"
            ],
            "correct_answer_index": 3,
            "explanation": "replace() replaces only the first occurrence of a substring.\n\nExample:\n`const str = 'Hello, World! World!';\nconsole.log(str.replace('World', 'Earth')); // 'Hello, Earth! World!'\nconsole.log(str.replaceAll('World', 'Earth')); // 'Hello, Earth! Earth!'`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"
        },
        {
            "question": "What does String.slice() do?",
            "options": [
                "Splits a string into an array",
                "Removes whitespace",
                "Converts case",
                "Extracts a section of a string"
            ],
            "correct_answer_index": 3,
            "explanation": "slice() extracts a section of a string and returns it as a new string.\n\nExample:\n`const str = 'Hello, World!';\nconsole.log(str.slice(0, 5)); // 'Hello'\nconsole.log(str.slice(-6)); // 'World!'`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice"
        },
        {
            "question": "What does String.split() return?",
            "options": [
                "A new string",
                "A boolean",
                "A number",
                "An array of substrings"
            ],
            "correct_answer_index": 3,
            "explanation": "split() divides a string into an ordered list of substrings.\n\nExample:\n`const str = 'Hello, World!';\nconsole.log(str.split(', ')); // ['Hello', 'World!']\nconsole.log(str.split('')); // ['H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!']`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split"
        },
        {
            "question": "What does String.trim() do?",
            "options": [
                "Removes all spaces",
                "Removes specific characters",
                "Adds padding",
                "Removes whitespace from both ends"
            ],
            "correct_answer_index": 3,
            "explanation": "trim() removes whitespace from both ends of a string.\n\nExample:\n`const str = '  Hello, World!  ';\nconsole.log(str.trim()); // 'Hello, World!'`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim"
        },
        {
            "question": "What does String.toUpperCase() do?",
            "options": [
                "Converts first character to uppercase",
                "Converts all characters to lowercase",
                "Capitalizes each word",
                "Converts all characters to uppercase"
            ],
            "correct_answer_index": 3,
            "explanation": "toUpperCase() converts a string to uppercase letters.\n\nExample:\n`const str = 'Hello, World!';\nconsole.log(str.toUpperCase()); // 'HELLO, WORLD!'`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase"
        },
        {
            "question": "What does Object.keys() return?",
            "options": [
                "Array of property values",
                "Array of methods",
                "Object with all keys",
                "Array of property names"
            ],
            "correct_answer_index": 3,
            "explanation": "Object.keys() returns an array of a given object's own enumerable property names.\n\nExample:\n`const obj = { name: 'John', age: 30 };\nconsole.log(Object.keys(obj)); // ['name', 'age']`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"
        },
        {
            "question": "What does Object.values() return?",
            "options": [
                "Array of property names",
                "Array of methods",
                "Object with all values",
                "Array of property values"
            ],
            "correct_answer_index": 3,
            "explanation": "Object.values() returns an array of a given object's own enumerable property values.\n\nExample:\n`const obj = { name: 'John', age: 30 };\nconsole.log(Object.values(obj)); // ['John', 30]`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values"
        },
        {
            "question": "What does Object.entries() return?",
            "options": [
                "Array of property names",
                "Array of property values",
                "Object with all entries",
                "Array of [key, value] pairs"
            ],
            "correct_answer_index": 3,
            "explanation": "Object.entries() returns an array of a given object's own enumerable string-keyed property [key, value] pairs.\n\nExample:\n`const obj = { name: 'John', age: 30 };\nconsole.log(Object.entries(obj)); // [['name', 'John'], ['age', 30]]`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"
        },
        {
            "question": "What does Object.assign() do?",
            "options": [
                "Creates a new object",
                "Merges two objects into a new object",
                "Compares two objects",
                "Copies values from one object to another"
            ],
            "correct_answer_index": 3,
            "explanation": "Object.assign() copies all enumerable own properties from one or more source objects to a target object.\n\nExample:\n`const target = { a: 1 };\nconst source = { b: 2, c: 3 };\nObject.assign(target, source);\nconsole.log(target); // { a: 1, b: 2, c: 3 }`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"
        },
        {
            "question": "What does Object.hasOwn() do?",
            "options": [
                "Adds a property to object",
                "Removes a property from object",
                "Lists all properties",
                "Checks if object has a property"
            ],
            "correct_answer_index": 3,
            "explanation": "Object.hasOwn() returns a boolean indicating whether the specified property is a direct property of the object.\n\nExample:\n`const obj = { name: 'John' };\nconsole.log(Object.hasOwn(obj, 'name')); // true\nconsole.log(Object.hasOwn(obj, 'age')); // false`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn"
        },
        {
            "question": "What does Math.max() do?",
            "options": [
                "Returns the smallest number",
                "Returns the average",
                "Returns the sum",
                "Returns the largest number"
            ],
            "correct_answer_index": 3,
            "explanation": "Math.max() returns the largest of zero or more numbers.\n\nExample:\n`console.log(Math.max(1, 3, 2)); // 3\nconsole.log(Math.max(...[1, 3, 2])); // 3`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max"
        },
        {
            "question": "What does Math.min() do?",
            "options": [
                "Returns the largest number",
                "Returns the average",
                "Returns the sum",
                "Returns the smallest number"
            ],
            "correct_answer_index": 3,
            "explanation": "Math.min() returns the smallest of zero or more numbers.\n\nExample:\n`console.log(Math.min(1, 3, 2)); // 1\nconsole.log(Math.min(...[1, 3, 2])); // 1`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min"
        },
        {
            "question": "What does Math.floor() do?",
            "options": [
                "Rounds up to nearest integer",
                "Rounds to nearest integer",
                "Removes decimal part",
                "Rounds down to nearest integer"
            ],
            "correct_answer_index": 3,
            "explanation": "Math.floor() returns the largest integer less than or equal to a given number.\n\nExample:\n`console.log(Math.floor(3.7)); // 3\nconsole.log(Math.floor(-3.7)); // -4`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor"
        },
        {
            "question": "What does Math.ceil() do?",
            "options": [
                "Rounds down to nearest integer",
                "Rounds to nearest integer",
                "Removes decimal part",
                "Rounds up to nearest integer"
            ],
            "correct_answer_index": 3,
            "explanation": "Math.ceil() returns the smallest integer greater than or equal to a given number.\n\nExample:\n`console.log(Math.ceil(3.7)); // 4\nconsole.log(Math.ceil(-3.7)); // -3`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil"
        },
        {
            "question": "What does Math.random() return?",
            "options": [
                "Random integer",
                "Random boolean",
                "Random string",
                "Random number between 0 and 1"
            ],
            "correct_answer_index": 3,
            "explanation": "Math.random() returns a floating-point, pseudo-random number in the range 0 to less than 1.\n\nExample:\n`console.log(Math.random()); // e.g., 0.123456789\n// To get random integer between min and max:\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"
        },
        {
            "question": "What does Date.now() return?",
            "options": [
                "Current date string",
                "Current time string",
                "Date object",
                "Milliseconds since epoch"
            ],
            "correct_answer_index": 3,
            "explanation": "Date.now() returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n\nExample:\n`console.log(Date.now()); // e.g., 1647123456789\n// Convert to date:\nconsole.log(new Date(Date.now())); // Current date and time`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now"
        },
        {
            "question": "What does new Date().toISOString() return?",
            "options": [
                "Milliseconds since epoch",
                "Date object",
                "Local date string",
                "ISO 8601 formatted string"
            ],
            "correct_answer_index": 3,
            "explanation": "toISOString() returns a string in ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ).\n\nExample:\n`console.log(new Date().toISOString()); // e.g., '2024-03-14T12:34:56.789Z'`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString"
        },
        {
            "question": "What does JSON.stringify() do?",
            "options": [
                "Parses JSON string to object",
                "Validates JSON",
                "Formats JSON",
                "Converts object to JSON string"
            ],
            "correct_answer_index": 3,
            "explanation": "JSON.stringify() converts a JavaScript object or value to a JSON string.\n\nExample:\n`const obj = { name: 'John', age: 30 };\nconsole.log(JSON.stringify(obj)); // '{\"name\":\"John\",\"age\":30}'`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"
        },
        {
            "question": "What does JSON.parse() do?",
            "options": [
                "Converts object to JSON string",
                "Validates JSON",
                "Formats JSON",
                "Parses JSON string to object"
            ],
            "correct_answer_index": 3,
            "explanation": "JSON.parse() parses a JSON string, constructing the JavaScript value or object described by the string.\n\nExample:\n`const jsonStr = '{\"name\":\"John\",\"age\":30}';\nconsole.log(JSON.parse(jsonStr)); // { name: 'John', age: 30 }`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"
        },
        {
            "question": "What does Promise.all() do?",
            "options": [
                "Returns first resolved promise",
                "Returns first rejected promise",
                "Returns all rejected promises",
                "Returns all resolved promises"
            ],
            "correct_answer_index": 3,
            "explanation": "Promise.all() takes an iterable of promises and returns a single promise that resolves when all promises have resolved.\n\nExample:\n`const promise1 = Promise.resolve(1);\nconst promise2 = Promise.resolve(2);\nPromise.all([promise1, promise2])\n  .then(values => console.log(values)); // [1, 2]`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"
        },
        {
            "question": "What does Promise.race() do?",
            "options": [
                "Returns all resolved promises",
                "Returns first rejected promise",
                "Returns all rejected promises",
                "Returns first resolved promise"
            ],
            "correct_answer_index": 3,
            "explanation": "Promise.race() returns a promise that fulfills or rejects as soon as one of the promises fulfills or rejects.\n\nExample:\n`const promise1 = new Promise(resolve => setTimeout(() => resolve(1), 500));\nconst promise2 = new Promise(resolve => setTimeout(() => resolve(2), 100));\nPromise.race([promise1, promise2])\n  .then(value => console.log(value)); // 2 (resolves first)`\n\nðŸ“š Learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"
        }
    ]
} 